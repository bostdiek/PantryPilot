services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - pantrypilot-network

  # FastAPI Backend Service
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      API_V1_STR: ${API_V1_STR}
      PROJECT_NAME: ${PROJECT_NAME}
      VERSION: ${VERSION}
      CORS_ORIGINS: ${CORS_ORIGINS}
      ENVIRONMENT: ${ENVIRONMENT}
      LOG_LEVEL: ${LOG_LEVEL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000${API_V1_STR}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pantrypilot-network

  # React Frontend Service
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      # Ensure VITE_API_URL is embedded at build time for production bundles.
      # (Vite only injects variables during build; runtime env won't affect static assets.)
      args:
        VITE_API_URL: ${VITE_API_URL}
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: ${VITE_API_URL}
      NODE_ENV: production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - pantrypilot-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Custom network for service isolation
networks:
  pantrypilot-network:
    driver: bridge
