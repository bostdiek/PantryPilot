name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-lint-and-type-check:
    name: Backend Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: apps/backend
          python-version: "3.12"
          enable-cache: true
          cache-dependency-glob: apps/backend/uv.lock

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run Ruff check (lint)
        run: uv run ruff check --output-format=github .

      - name: Run Ruff format check
        run: uv run ruff format --check --diff .

      - name: Run mypy type check
        # Run mypy the same way as local developers: set MYPYPATH=src and target packages
        run: MYPYPATH=src uv run mypy -p api -p core -p crud -p dependencies -p models -p schemas

  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: apps/backend
          python-version: "3.12"
          enable-cache: true
          cache-dependency-glob: apps/backend/uv.lock

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run tests
        run: uv run pytest --cov=src --cov-report=term --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: apps/backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-lint-and-type-check:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "24.1.0" # Match local development version
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript types
        run: npm run type-check

      - name: Check Prettier formatting
        run: npm run format:check

  frontend-test:
    name: Frontend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "24.1.0" # Match local development version
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "24.1.0" # Match local development version
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: apps/frontend/dist/
          retention-days: 7

  security-audit:
    name: Security Audit
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: apps/backend
          python-version: "3.12"
          enable-cache: true
          cache-dependency-glob: apps/backend/uv.lock

      - name: Export backend dependencies
        working-directory: apps/backend
        run: |
          uv export --format=requirements-txt --no-hashes > requirements.lock

      - name: Run backend security audit (pip-audit)
        working-directory: apps/backend
        run: |
          # NOTE: Ignoring GHSA-4xh5-x5gv-qwph affecting pip (25.2) â€” no upstream fix version available yet.
          # pip is a build tool, not a runtime dependency shipped with the application; treating as informational until patched.
          uvx --from pip-audit pip-audit -r requirements.lock --format=json --output=backend-audit.json --ignore-vuln GHSA-4xh5-x5gv-qwph || true
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "24.1.0" # Match local development version
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Run frontend security audit (npm)
        working-directory: apps/frontend
        run: |
          npm audit --audit-level=moderate --json > frontend-audit.json
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            apps/backend/backend-audit.json
            apps/frontend/frontend-audit.json
          retention-days: 30

  secret-scanning:
    name: Secret Scanning
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for detect-secrets to analyze all files

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run secret detection
        run: |
          detect-secrets scan --baseline .secrets.baseline --all-files .

      - name: Verify secrets baseline
        run: |
          detect-secrets audit --stats .secrets.baseline
