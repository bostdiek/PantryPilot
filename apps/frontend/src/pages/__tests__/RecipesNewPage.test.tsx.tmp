import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect, vi, beforeEach } from 'vitest';

// Basic stable mocks for modules used by the page
vi.mock('../../stores/useRecipeStore', () => ({
  useRecipeStore: () => ({
    addRecipe: vi.fn().mockResolvedValue(true),
    formSuggestion: null,
    isAISuggestion: false,
    clearFormSuggestion: vi.fn(),
  }),
}));

let apiOnline = true;
vi.mock('../../utils/useApiHealth', () => ({ useApiHealth: () => ({ isApiOnline: apiOnline }) }));
vi.mock('../../utils/offlineSync', () => ({ saveRecipeOffline: vi.fn() }));
vi.mock('../../hooks/useUnsavedChanges', () => ({ useUnsavedChanges: () => {} }));
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom');
  return { ...actual, useNavigate: () => vi.fn() };
});
vi.mock('../../components/ui/useToast', () => ({ useToast: () => ({ success: vi.fn() }) }));
vi.mock('../../hooks/usePasteSplit', () => ({ usePasteSplit: () => ({ pasteSplitModal: { isOpen: false, candidateSteps: [], originalContent: '' } }) }));

import RecipesNewPage from '../RecipesNewPage';

describe('RecipesNewPage (minimal)', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    apiOnline = true;
  });

  it('shows validation alert when submitting without ingredients', async () => {
    render(<RecipesNewPage /> as any);

    // Ensure name present so browser won't block submit
    const name = screen.getByLabelText(/Recipe Name/i);
    await userEvent.type(name, 'Test');

    const save = screen.getByRole('button', { name: /save recipe/i });
    await userEvent.click(save);

    await waitFor(() => expect(screen.queryByRole('alert')).not.toBeNull());
    expect(screen.getByRole('alert').textContent).toMatch(/add at least one/i);
  });

  it('prefills fields when store provides AI suggestion', async () => {
    vi.resetModules();

    const suggestion = {
      title: 'Sug Title',
      description: 'Sug Desc',
      ingredients: [{ name: 'Onion', quantity_value: 1, quantity_unit: 'count', prep: {}, is_optional: false }],
      instructions: ['Do this'],
    };

    vi.mock('../../stores/useRecipeStore', () => ({
      useRecipeStore: () => ({
        addRecipe: vi.fn().mockResolvedValue(true),
        formSuggestion: suggestion,
        isAISuggestion: true,
        clearFormSuggestion: vi.fn(),
      }),
    }));

    const { default: RecipesNewPageWithMocks } = await import('../RecipesNewPage');
    render(<RecipesNewPageWithMocks /> as any);

    await waitFor(() => expect(screen.getByDisplayValue('Sug Title')).toBeTruthy());
    expect(screen.getByDisplayValue('Onion')).toBeTruthy();
    expect(screen.getByDisplayValue('Do this')).toBeTruthy();
  });
});
