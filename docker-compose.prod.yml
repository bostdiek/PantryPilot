# Production environment overrides
# Use with: docker compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Database - Production Configuration
  db:
    # No ports exposed in production (internal access only)
    environment:
      POSTGRES_LOG_STATEMENT: ddl # Only log DDL statements
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 1000 # Log slow queries (>1s)
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements
    # Production security and performance
    user: postgres
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend - Production Configuration
  backend:
    build:
      target: production # Use production stage of Dockerfile
    # No ports exposed (accessed via nginx)
    environment:
      FASTAPI_ENV: production
      PYTHONPATH: /app/src
      # On low-memory devices (Raspberry Pi) reduce workers to 1 by default.
      # Override this in your .env.prod or via compose if you have more RAM.
      WORKERS: 1
    env_file:
      - .env.prod
    command:
      - "uv"
      - "run"
      - "gunicorn"
      - "src.main:app"
      - "--workers"
      - "${WORKERS}"
      - "--worker-class"
      - "uvicorn.workers.UvicornWorker"
      - "--bind"
      - "0.0.0.0:8000"
      - "--worker-tmp-dir"
      - "/dev/shm"
      - "--max-requests"
      - "1000"
      - "--max-requests-jitter"
      - "50"
      - "--preload"
      - "--timeout"
      - "120"
      - "--keep-alive"
      - "5"
    # Production security
    user: app
    read_only: true
    tmpfs:
      - /tmp
      - /dev/shm
      # Allow uv and runtime to write cache directories even when root FS is read-only.
      # Mount a tmpfs with ownership and mode so the non-root `app` user can write.
      # If your image creates `app` with a different UID/GID, change uid=1000,gid=1000 accordingly.
      - /app/.cache:uid=1000,gid=1000,mode=0777,size=100m
    # Override health check for production
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend - Production Configuration (static files via nginx)
  frontend:
    build:
      target: production # Use production stage of Dockerfile
      # Pass through API base URL at build time so Vite embeds it into the bundle.
      args:
        VITE_API_URL: ${VITE_API_URL}
    # No ports exposed (accessed via nginx)
    environment:
      NODE_ENV: production
    # Production security
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx:mode=0777,size=50m
      - /var/run:mode=0777,size=10m

  # Nginx Reverse Proxy (Production Only)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      # - "443:443"  # For HTTPS (requires SSL configuration)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # Persist logs (so access/error are kept across restarts)
      - nginx_logs:/var/log/nginx
      # SSL certificates (uncomment when ready for HTTPS)
      # - ./ssl/certs:/etc/ssl/certs:ro
      # - ./ssl/private:/etc/ssl/private:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pantrypilot-network
    # Production security
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx:mode=0777,size=50m
      - /var/run:mode=0777,size=10m
      # Use tmpfs for /var/cache/nginx to avoid host-volume permission issues on read-only containers.
      # Logs remain persisted to the named volume `nginx_logs`.

# Production-specific volumes
volumes:
  nginx_logs:
    driver: local
