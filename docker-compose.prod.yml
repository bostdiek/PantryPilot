# Production environment overrides
# Use with: docker compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Database - Production Configuration
  db:
    # No ports exposed in production (internal access only)
    environment:
      POSTGRES_LOG_STATEMENT: ddl  # Only log DDL statements
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 1000  # Log slow queries (>1s)
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements
    # Production security and performance
    user: postgres
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend - Production Configuration
  backend:
    build:
      target: production  # Use production stage of Dockerfile
    # No ports exposed (accessed via nginx)
    environment:
      FASTAPI_ENV: production
      PYTHONPATH: /app/src
      WORKERS: 4
    command: >
      uv run gunicorn src.main:app
      --workers 4
      --worker-class uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8000
      --worker-tmp-dir /dev/shm
      --max-requests 1000
      --max-requests-jitter 50
      --preload
      --timeout 120
      --keepalive 5
    # Production security
    user: app
    read_only: true
    tmpfs:
      - /tmp
      - /dev/shm
    # Override health check for production
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend - Production Configuration (static files via nginx)
  frontend:
    build:
      target: production  # Use production stage of Dockerfile
    # No ports exposed (accessed via nginx)
    environment:
      NODE_ENV: production
    # Production security
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx

  # Nginx Reverse Proxy (Production Only)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"  # For HTTPS (requires SSL configuration)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      # SSL certificates (uncomment when ready for HTTPS)
      # - ./ssl/certs:/etc/ssl/certs:ro
      # - ./ssl/private:/etc/ssl/private:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pantrypilot-network
    # Production security
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /run/nginx

# Production-specific volumes
volumes:
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
